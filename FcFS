ALGORITHM FOR FCFS SCHEDULING:

Step 1: Start the process
Step 2: Accept the number of processes in the ready Queue
Step 3: For each process in the ready Q, assign the process id and accept the CPU
burst time
Step 4: Set the waiting of the first process as ‘0’ and its burst time as its turn around
time
Step 5: for each process in the Ready Q calculate
(a) Waiting time for process(n)= waiting time of process (n-1) + Burst time of
process(n-1)
(b) Turn around time for Process(n)= waiting time of Process(n)+ Burst time
for process(n)
Step 6: Calculate
(a) Average waiting time = Total waiting Time / Number of process
(b) Average Turnaround time = Total Turnaround Time / Number of process
Step 7: Stop the process

Program:
#include <stdio.h>

int main(){
    int bt[10],nop,i,j,tat[10],twt,ttat,wt[10];
    float awt=0.0, atat=0.0;

    printf("Enter the number of processes: ");

    scanf("%d",&nop);
    for(i=0;i<nop;i++)
    {
        printf("Enter the burst time of P[%d]",i+1
        );
        scanf("%d",&bt[i]);
    }

    printf("\n PROCESS\t Burst time\t Waiting time \t TurnAroundTime ");
    wt[0] = 0;
    tat[0]=bt[0];
    twt = wt[0];
    ttat = tat[0];
    for(i=0;i<nop;i++){
        wt[i] = 0;
        for(j=0;j<i;j++){
            wt[i]+=bt[j];
        }
        twt += wt[i];
    }

   
    for(i=0;i<nop;i++){
        
        tat[i] = wt[i] + bt[i];
        
        ttat += tat[i];
        printf("\n P[%d]\t\t %d\t\t %d\t\t %d\n",i+1,bt[i],wt[i],tat[i]);
    }
   
    awt = (float)twt/nop;
    atat = (float)ttat/nop;
    printf("\n%f",awt);
    printf("\n%f",atat);
    return 0;
}
