ALGORITHM FOR PRIORITY SCHEDULING.

Step 1: Start the process
Step 2: Accept the number of processes in the ready Queue
Step 3: For each process in the ready Q, assign the process id and accept the CPU
burst time
Step 4: Sort the ready queue according to the priority number.
Step 5: Set the waiting of the first process as ‘0’ and its burst time as its turn around
time
Step 6: For each process in the Ready Q calculate
(a) Waiting time for process(n)= waiting time of process (n-1) + Burst time of
process(n-1)
(b) Turn around time for Process(n)= waiting time of Process(n)+ Burst time
for process(n)
Step 7: Calculate
(a) Average waiting time = Total waiting Time / Number of process
(b) Average Turnaround time = Total Turnaround Time / Number of process
Step 8: Stop the process

Program:
#include <stdio.h>

int main(){
    int bt[10],p[10],tat[10],wt[10],i,j,n,ttat,twt,pt[10],pos,temp;
    float awt,atat;

    printf("Enter the number of Process: ");
    scanf("%d",&n);

    for(i=0;i<n;i++){
        printf("Enter the burst time for P[%d]:",i+1);
        scanf("%d",&bt[i]);
    }

    for(i=0;i<n;i++){
        printf("Enter the priority time for P[%d]:",i+1);
        scanf("%d",&pt[i]);
        p[i] = i+1;
    }

    for(i=0;i<n;i++){
        pos = i;
        for(j=i+1;j<n;j++)
            if(pt[j] < pt[pos]){
                pos = j;
            }
        temp = pt[i];
        pt[i] = pt[pos];
        pt[pos]= temp;

        temp = p[i];
        p[i] = p[pos];
        p[pos]= temp;
        
    }
    wt[0]= 0;
    tat[0]=bt[0];
    twt = wt[0];
    ttat = tat[0];

    for(i=0;i<n;i++){
        wt[i] = 0;
        for(j=0;j<i;j++)
            wt[i] += bt[j];
        twt += wt[i];
    }
    for(i=0;i<n;i++){
        tat[i] = wt[i]+bt[i];
        ttat += tat[i];
    }
    printf("\nProcess\t Burst Time\t Priority Time\t Waiting time\t TAroundTime\n");
    for(i=0;i<n;i++){
        printf("\nP[%d]\t\t %d\t\t %d\t\t %d\t\t %d",p[i],bt[i],pt[i],wt[i],tat[i]);
    }

    awt = (float)twt/n;
    atat = (float)ttat/n;
    
    printf("\n%d",twt);
    printf("\n%d",ttat);
    printf("\n%f",awt);
    printf("\n%f",atat);
    return 0;

}
