ALGORITHM:
Step 1: Start the program.
Step 2: Get the number of memory partition and their sizes.
Step 3: Get the number of processes and values of block size for each process.
Step 4: First fit algorithm searches all the entire memory block until a hole which is
big enough is encountered. It allocates that memory block for the requesting
process.
Step 5: Best-fit algorithm searches the memory blocks for the smallest hole which
can be allocated to requesting process and allocates if.
Step 6: Worst fit algorithm searches the memory blocks for the largest hole and
allocates it to the process.
Step 7: Analyses all the three memory management techniques and display the best
algorithm which utilizes the memory resources effectively and efficiently.
Step 8: Stop the program

Program:
#include<stdio.h>

int main(){
    int n,m,i,j,b[10],p[10],b1[20],b2[20],b3[20],k=0,h,flag,c,t,min,minindex;

    printf("Enter no of memory parition");
    scanf("%d",&n);

    printf("Enter no of process");
    scanf("%d",&m);

    for(i=0;i<n;i++){
        printf("Enter the size of memory block allocation for %d:",i+1);
        scanf("%d",&b[i]);
        b2[i] = b[i];
        b3[i] = b[i];
    }
    for(i=0;i<n;i++){
        printf("Enter the pagesize:");
        scanf("%d",&p[i]);
    }
    
    do{
        printf("\n1.First Fit");
        printf("\n2.Best Fit");
        printf("\n3worst Fit");
        printf("\nEtnter your choice\n");
        scanf("%d",&c);

        switch(c){
        case 1:
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                b1[i]=0;
                if (p[i]<=b[j])
                {
                    b1[i] = b[j];
                    b[j]=0;
                    break;
                }
                
            }
        }
        break;

        case 2:
        for(i=0;i<m;i++){
            min = 9999;
            minindex = -1;
            for(j=0;j<n;j++){
                if(p[i]<=b2[j]&&b2[j]!=0&&min>b2[j]){
                    min = b2[j];
                    minindex = j;
                }
            }
            b1[i] = b[minindex];
            b2[minindex] = 0;
            }
            break;

            case 3:
            for(i=0;i<m;i++){
                b[i]=0;
                for(j=0;j<n;j++){
                    if(p[i]<b3[j]){
                        k++;
                        if(k==1){
                            b1[i] = b3[j];
                        }
                        if(b1[i]<=b3[j]){
                            flag = 1;
                            b1[i] = b3[j];
                            h=j;
                        }
                    }
                }
                k=0;
                if(flag ==1){
                    b3[h] = 0;
                }
            }
            break;

            default:
            printf("\nOut of choice");
    }
    printf("\n----------\n");
    printf("\n|Page   |Frame   |Free\n");
    printf("\n----------\n");
    t = 0;

    for(i=0;i<n;i++){
        h=b1[i]-p[i];
        if(h<0)
            h=0;
        
        printf("\n%d\t\t%d\t\t%d",p[i],b1[i],h);
        t += h;
    }
    printf("\n---------\n");
    printf("\n Total Free space in memory:%d",t);

    }while(c<4);
    
    return 0;
}
