ALGORITHM FOR SJF:

Step 1: Start the process
Step 2: Accept the number of processes in the ready Queue
Step 3: For each process in the ready Q, assign the process id and accept the CPU
burst time
Step 4: Start the Ready Q according the shortest Burst time by sorting according to
lowest to highest burst time.
Step 5: Set the waiting time of the first process as ‘0’ and its turnaround time as its
burst time.
Step 6: For each process in the ready queue, calculate
(a) Waiting time for process(n)= waiting time of process (n-1) + Burst time of
process(n-1)
(b) Turnaround time for Process(n)= waiting time of Process(n)+ Burst time for
process(n)
Step 7: Calculate
(a) Average waiting time = Total waiting Time / Number of process
(b) Average Turnaround time = Total Turnaround Time / Number of process
Step 8: Stop the process

Program:
#include <stdio.h>

int main(){
    int n,i,j,ttat,twt,bt[10],tat[10],wt[10],p[10],pos;
    int temp;
    float awt,atat;
    printf("Enter the no. of processes: ",n);
    scanf("%d",&n);

    for(i=0;i<n;i++){
        printf("Enter the burst time of P[%d]",i+1);
        scanf("%d",&bt[i]);
        p[i] = i+1;
    }

    for(i=0;i<n;i++){
        pos = i;
        for(j=i+1;j<n;j++){
            if(bt[j]<bt[pos])
                pos = j;}
        temp = bt[i];
        bt[i] = bt[pos];
        bt[pos] = temp;

        temp = p[i];                
           p[i]= p[pos];
        p[pos] = temp;
            
            
        }

    wt[0]= 0;
    twt = wt[0];
    ttat = tat[0];

    for(i=0;i<n;i++){
        wt[i]= 0;
        for(j=0;j<i;j++){
            wt[i] += bt[j];
        }
    }

    for(i=0;i<n;i++){
        tat[i]= wt[i]+bt[i];
        twt += wt[i];
        ttat += tat[i];

    }
    printf("\n Process\t Burst time\t Waiting time\t TurnAroundTime\n");
    for(i=0;i<n;i++){
        printf("\n P[%d]\t\t %d\t\t %d\t\t %d",p[i],bt[i],wt[i],tat[i]);

    }
    awt = (float)twt/n;
    atat = (float)ttat/n;

    printf("\n%f",awt);
    printf("\n%f",atat);

    return 0;
}
